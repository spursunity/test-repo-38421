import { initAuth, supabase } from './services/supabase.js'
import { createGame, joinGame, revealCell, validateGuess, skipTurn, getGameState } from './services/gameService.js'
import { realtimeManager } from './services/realtimeService.js'
import { GameGrid } from './components/GameGrid.js'
import { GuessInput } from './components/GuessInput.js'
import { TurnIndicator } from './components/TurnIndicator.js'
import { GameOverScreen } from './components/GameOverScreen.js'
import { logger, perfMonitor } from './utils/logger.js'
import { handleError, GameError } from './utils/errorHandler.js'
import { GestureManager, GestureUtils } from './utils/GestureManager.js'

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è debouncing —á–∞—Å—Ç—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 */
class AppDebouncer {
  constructor() {
    this.timers = new Map()
  }

  debounce(key, callback, delay = 300) {
    if (this.timers.has(key)) {
      clearTimeout(this.timers.get(key))
    }
    
    const timerId = setTimeout(() => {
      try {
        callback()
      } catch (error) {
        logger.error(`AppDebouncer: –û—à–∏–±–∫–∞ –≤ debounced –æ–ø–µ—Ä–∞—Ü–∏–∏ ${key}:`, error)
      } finally {
        this.timers.delete(key)
      }
    }, delay)
    
    this.timers.set(key, timerId)
  }

  clear() {
    this.timers.forEach(timer => clearTimeout(timer))
    this.timers.clear()
  }
}

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –º–µ–Ω—é –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ event listeners
 */
class ContextMenuManager {
  constructor() {
    this.activeMenu = null
    this.closeHandler = null
  }

  show(x, y, actions) {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é
    this.hide()

    const menu = this.createMenu(x, y, actions)
    document.body.appendChild(menu)
    this.activeMenu = menu

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é
    this.setupCloseHandler()
  }

  createMenu(x, y, actions) {
    const menu = document.createElement('div')
    menu.className = 'context-menu'
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é
    const menuWidth = 200
    const menuHeight = actions.length * 40 + 16
    
    let posX = Math.max(10, Math.min(x, window.innerWidth - menuWidth - 10))
    let posY = Math.max(10, Math.min(y, window.innerHeight - menuHeight - 10))
    
    // –ï—Å–ª–∏ –º–µ–Ω—é –≤ —Ü–µ–Ω—Ç—Ä–µ, —Å–¥–≤–∏–≥–∞–µ–º –µ–≥–æ –≤–≤–µ—Ä—Ö
    const isCentered = Math.abs(x - window.innerWidth / 2) < 50 && Math.abs(y - window.innerHeight / 2) < 50
    if (isCentered) {
      posY = Math.max(10, y - menuHeight - 20)
    }
    
    menu.style.cssText = `
      position: fixed;
      left: ${posX}px;
      top: ${posY}px;
      z-index: 10001;
    `

    actions.forEach((action, index) => {
      const item = document.createElement('div')
      item.className = 'context-menu-item'
      item.textContent = action.text
      
      // –î–æ–±–∞–≤–ª—è–µ–º CSS –∫–ª–∞—Å—Å—ã –∏–∑ —Å—Ç–∏–ª–µ–π
      if (action.destructive) {
        item.classList.add('context-menu-item--destructive')
      }
      
      const clickHandler = () => {
        try {
          action.action()
        } catch (error) {
          logger.error(`–û—à–∏–±–∫–∞ –≤ –¥–µ–π—Å—Ç–≤–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é:`, error)
        } finally {
          this.hide()
        }
      }
      
      item.addEventListener('click', clickHandler)
      
      // –î–æ–±–∞–≤–ª—è–µ–º touch feedback
      if (GestureUtils.isTouchDevice()) {
        GestureUtils.addTouchFeedback(item)
      }
      
      menu.appendChild(item)
    })

    return menu
  }

  setupCloseHandler() {
    // –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É, —á—Ç–æ–±—ã —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–∫–∞ –ø–æ –º–µ–Ω—é –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∏
    setTimeout(() => {
      this.closeHandler = (event) => {
        if (this.activeMenu && !this.activeMenu.contains(event.target)) {
          this.hide()
        }
      }
      document.addEventListener('click', this.closeHandler)
      document.addEventListener('touchstart', this.closeHandler, { passive: true })
    }, 100)
  }

  hide() {
    if (this.activeMenu) {
      this.activeMenu.remove()
      this.activeMenu = null
    }
    
    if (this.closeHandler) {
      document.removeEventListener('click', this.closeHandler)
      document.removeEventListener('touchstart', this.closeHandler)
      this.closeHandler = null
    }
  }
}

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞
 */
class ShareModalManager {
  constructor() {
    this.modal = null
    this.isOpen = false
    this.closeHandlers = []
  }

  init() {
    this.modal = document.getElementById('share-modal')
    if (!this.modal) {
      logger.error('Share modal element not found')
      return false
    }

    this.setupEventListeners()
    return true
  }

  setupEventListeners() {
    // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
    const closeBtn = document.getElementById('close-share-modal')
    if (closeBtn) {
      closeBtn.addEventListener('click', () => this.hide())
    }

    // –ö–ª–∏–∫ –ø–æ backdrop
    const backdrop = this.modal.querySelector('.share-modal__backdrop')
    if (backdrop) {
      backdrop.addEventListener('click', () => this.hide())
    }

    // ESC –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
    const escHandler = (event) => {
      if (event.key === 'Escape' && this.isOpen) {
        this.hide()
      }
    }
    document.addEventListener('keydown', escHandler)
    this.closeHandlers.push(() => document.removeEventListener('keydown', escHandler))
  }

  show(shareUrl, roomId) {
    if (!this.modal) {
      logger.error('Share modal not initialized')
      return
    }

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    const linkInput = document.getElementById('share-link-input')
    if (linkInput) {
      linkInput.value = shareUrl
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    this.setupCopyButton(shareUrl)
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º native share –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    this.setupNativeShare(shareUrl, roomId)

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª
    this.modal.style.display = 'block'
    this.isOpen = true

    // –§–æ–∫—É—Å –Ω–∞ input –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    setTimeout(() => {
      if (linkInput) {
        linkInput.select()
      }
    }, 100)

    logger.info('Share modal opened', { shareUrl, roomId })
  }

  setupCopyButton(shareUrl) {
    const copyBtn = document.getElementById('copy-share-link-btn')
    if (!copyBtn) return

    const originalText = copyBtn.textContent
    
    const copyHandler = async () => {
      try {
        await navigator.clipboard.writeText(shareUrl)
        copyBtn.textContent = '‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!'
        copyBtn.style.backgroundColor = '#22c55e'
        
        setTimeout(() => {
          copyBtn.textContent = originalText
          copyBtn.style.backgroundColor = ''
        }, 2000)
        
        logger.info('Share URL copied to clipboard')
      } catch (error) {
        logger.error('Failed to copy share URL:', error)
        copyBtn.textContent = '‚ùå –û—à–∏–±–∫–∞'
        setTimeout(() => {
          copyBtn.textContent = originalText
        }, 2000)
      }
    }

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    copyBtn.replaceWith(copyBtn.cloneNode(true))
    const newCopyBtn = document.getElementById('copy-share-link-btn')
    newCopyBtn.addEventListener('click', copyHandler)
  }

  setupNativeShare(shareUrl, roomId) {
    const nativeContainer = document.getElementById('native-share-container')
    const nativeBtn = document.getElementById('native-share-btn')
    
    if (!nativeContainer || !nativeBtn) return

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Web Share API
    if (!navigator.share) {
      nativeContainer.style.display = 'none'
      return
    }

    nativeContainer.style.display = 'block'
    
    const shareHandler = async () => {
      try {
        await navigator.share({
          title: 'üéØ –£–≥–∞–¥–∞–π –°–ª–æ–≤–æ Online',
          text: `–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –∏–≥—Ä–µ! –ö–æ–º–Ω–∞—Ç–∞: ${roomId}`,
          url: shareUrl
        })
        
        logger.info('Native share completed')
        this.hide() // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —à–∞—Ä–∏–Ω–≥–∞
        
      } catch (error) {
        if (error.name !== 'AbortError') { // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –æ—Ç–º–µ–Ω–∏–ª
          logger.error('Native share failed:', error)
        }
      }
    }

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    nativeBtn.replaceWith(nativeBtn.cloneNode(true))
    const newNativeBtn = document.getElementById('native-share-btn')
    newNativeBtn.addEventListener('click', shareHandler)
  }

  hide() {
    if (!this.modal) return

    this.modal.style.display = 'none'
    this.isOpen = false
    
    logger.info('Share modal closed')
  }

  destroy() {
    this.hide()
    this.closeHandlers.forEach(handler => handler())
    this.closeHandlers = []
  }
}

/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export class App {
  constructor() {
    this.state = {
      currentUser: null,
      roomId: null,
      gameState: null,
      isLoading: false,
      isCreatingGame: false, // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥–≤–æ–π–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
      isFirstPlayer: false, // –§–ª–∞–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
      playerJoinedNotificationShown: false, // –ù–û–í–û–ï: –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      previousGameState: null // –ù–û–í–û–ï: –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    }

    this.components = {
      gameGrid: null,
      guessInput: null,
      turnIndicator: null,
      gameOverScreen: null
    }

    this.ui = {
      loadingOverlay: document.getElementById('loading-overlay'),
      errorMessage: document.getElementById('error-message'),
      menuScreen: document.getElementById('menu-screen'),
      gameScreen: document.getElementById('game-screen'),
      createGameBtn: document.getElementById('create-game-btn'),
      joinGameBtn: document.getElementById('join-game-btn'),
      roomIdInput: document.getElementById('room-id-input'),
      roomIdDisplay: document.getElementById('room-id-display'),
      copyRoomIdBtn: document.getElementById('copy-room-id-btn'),
      shareRoomBtn: document.getElementById('share-room-btn'), // –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
      waitingIndicator: document.getElementById('waiting-indicator'), // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–∂–∏–¥–∞–Ω–∏—è
      wordLengthSelect: document.getElementById('word-length-select')
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
    this.gestureManager = new GestureManager()
    this.debouncer = new AppDebouncer()
    this.contextMenuManager = new ContextMenuManager()
    this.shareModalManager = new ShareModalManager() // –ù–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
  }

  async init() {
    logger.info('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')
    perfMonitor.startMeasure('app_init')

    try {
      this.showLoading('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...')

      this.state.currentUser = await initAuth()
      logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω', { userId: this.state.currentUser.id })

      this.initComponents()
      this.attachEventListeners()
      this.initGestures()
      this.initShareModal() // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª–∞
      this.checkUrlParams()

      this.hideLoading()
      perfMonitor.endMeasure('app_init')
      logger.info('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ')

    } catch (error) {
      perfMonitor.endMeasure('app_init')
      this.handleError(error, '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')
    }
  }

  initShareModal() {
    const success = this.shareModalManager.init()
    if (!success) {
      logger.warn('Share modal initialization failed, falling back to simple sharing')
    }
  }

  initComponents() {
    logger.info('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤')

    this.components.gameGrid = new GameGrid('game-grid-container')
    this.components.guessInput = new GuessInput('guess-input-container')
    this.components.turnIndicator = new TurnIndicator('turn-indicator-container')
    this.components.gameOverScreen = new GameOverScreen('game-over-container')

    this.components.gameGrid.setCellClickHandler((row, col) => {
      this.handleCellClick(row, col)
    })

    this.components.guessInput.setSubmitHandler((word) => {
      this.handleGuessSubmit(word)
    })

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —Ö–æ–¥–∞
    this.components.guessInput.setSkipHandler(() => {
      this.handleSkipTurn()
    })

    this.components.gameOverScreen.setNewGameHandler(() => {
      this.handleNewGame()
    })

    this.components.gameOverScreen.setShareRoomHandler(() => {
      this.handleShareRoom()
    })
  }

  attachEventListeners() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ü–µ–ª–∏
    this.ui.createGameBtn?.addEventListener('click', (event) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∏–º–µ–Ω–Ω–æ –æ—Ç –∫–Ω–æ–ø–∫–∏, –∞ –Ω–µ –≤—Å–ø–ª—ã–ª–æ –æ—Ç select
      if (event.target === this.ui.createGameBtn || this.ui.createGameBtn.contains(event.target)) {
        event.stopPropagation() // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ
        this.handleCreateGame()
      }
    })

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–≥—Ä–µ —Å –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    this.ui.joinGameBtn?.addEventListener('click', (event) => {
      if (event.target === this.ui.joinGameBtn || this.ui.joinGameBtn.contains(event.target)) {
        event.stopPropagation()
        this.handleJoinGame()
      }
    })

    this.ui.copyRoomIdBtn?.addEventListener('click', () => {
      this.copyRoomId()
    })

    // –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–≥—Ä—É"
    this.ui.shareRoomBtn?.addEventListener('click', () => {
      this.handleShareRoomClick()
    })

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è select —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    if (this.ui.wordLengthSelect) {
      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ select
      this.ui.wordLengthSelect.addEventListener('click', (event) => {
        event.stopPropagation()
        logger.info('Select –∫–ª–∏–∫ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω –∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
      })

      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º touch —Å–æ–±—ã—Ç–∏—è –Ω–∞ select —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
      this.ui.wordLengthSelect.addEventListener('touchstart', (event) => {
        event.stopPropagation()
        logger.info('Select touchstart –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω')
      }, { passive: false })

      this.ui.wordLengthSelect.addEventListener('touchend', (event) => {
        event.stopPropagation()
        logger.info('Select touchend –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω')
      }, { passive: false })

      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ select
      this.ui.wordLengthSelect.addEventListener('change', (event) => {
        logger.info('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–ª–æ–≤–∞:', event.target.value)
      })
    }

    // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –∑–∞—â–∏—Ç–∞ –¥–ª—è input —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    if (this.ui.roomIdInput) {
      this.ui.roomIdInput.addEventListener('click', (event) => {
        event.stopPropagation()
      })

      this.ui.roomIdInput.addEventListener('touchstart', (event) => {
        event.stopPropagation()
      }, { passive: false })

      this.ui.roomIdInput.addEventListener('touchend', (event) => {
        event.stopPropagation()
      }, { passive: false })
    }

    window.addEventListener('beforeunload', () => {
      this.cleanup()
    })
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∂–µ—Å—Ç–æ–≤ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
   */
  initGestures() {
    if (!GestureUtils.isTouchDevice()) {
      logger.info('–≠—Ç–æ –Ω–µ touch-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –∂–µ—Å—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã')
      return
    }

    logger.info('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∂–µ—Å—Ç–æ–≤ –¥–ª—è touch-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∂–µ—Å—Ç—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const success = this.gestureManager.init(document.body)
    if (!success) {
      logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å GestureManager')
      return
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ swipe-–∂–µ—Å—Ç–æ–≤
    this.setupSwipeGestures()

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ tap-–∂–µ—Å—Ç–æ–≤
    this.setupTapGestures()

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ long-press –∂–µ—Å—Ç–æ–≤
    this.setupLongPressGestures()

    // –î–æ–±–∞–≤–ª—è–µ–º visual feedback –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    this.addTouchFeedback()
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ swipe-–∂–µ—Å—Ç–æ–≤ —Å debouncing
   */
  setupSwipeGestures() {
    // Swipe –≤–ª–µ–≤–æ - –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é / –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
    this.gestureManager.on('swipeLeft', (data) => {
      logger.info('Swipe –≤–ª–µ–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω', data)
      
      // –ï—Å–ª–∏ –º—ã –Ω–∞ —ç–∫—Ä–∞–Ω–µ –∏–≥—Ä—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
      if (this.ui.gameScreen?.style.display !== 'none') {
        this.showBackToMenuConfirmation()
      }
    })

    // Swipe –≤–ø—Ä–∞–≤–æ - –æ—Ç–∫—Ä—ã—Ç—å share modal
    this.gestureManager.on('swipeRight', (data) => {
      logger.info('Swipe –≤–ø—Ä–∞–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω', data)
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º share modal –µ—Å–ª–∏ –µ—Å—Ç—å roomId
      if (this.state.roomId && this.state.isFirstPlayer) {
        this.handleShareRoomClick()
      }
    })

    // Swipe –≤–≤–µ—Ä—Ö - –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã (—Å debouncing)
    this.gestureManager.on('swipeUp', (data) => {
      logger.info('Swipe –≤–≤–µ—Ä—Ö –æ–±–Ω–∞—Ä—É–∂–µ–Ω', data)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã —Å debouncing
      if (this.state.roomId && this.ui.gameScreen?.style.display !== 'none') {
        this.debouncer.debounce('loadGameState', () => {
          this.showNotification('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã...')
          this.loadGameState()
        }, 500)
      }
    })

    // Swipe –≤–Ω–∏–∑ - —Å–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É / —Å–≤–µ—Ä–Ω—É—Ç—å –æ—Ç–∫—Ä—ã—Ç–æ–µ –º–µ–Ω—é
    this.gestureManager.on('swipeDown', (data) => {
      logger.info('Swipe –≤–Ω–∏–∑ –æ–±–Ω–∞—Ä—É–∂–µ–Ω', data)
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–æ–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
      if (this.contextMenuManager.activeMenu) {
        this.contextMenuManager.hide()
        return
      }
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º share modal –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç
      if (this.shareModalManager.isOpen) {
        this.shareModalManager.hide()
        return
      }
      
      // –£–±–∏—Ä–∞–µ–º —Ñ–æ–∫—É—Å —Å input —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
      const activeElement = document.activeElement
      if (activeElement && (activeElement.tagName === 'INPUT' || activeElement.tagName === 'TEXTAREA')) {
        activeElement.blur()
        this.showNotification('–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞')
      }
    })
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ tap-–∂–µ—Å—Ç–æ–≤
   */
  setupTapGestures() {
    // Double-tap –Ω–∞ –∫–æ–º–Ω–∞—Ç–µ - –æ—Ç–∫—Ä—ã—Ç—å share modal
    this.gestureManager.on('doubleTap', (data) => {
      logger.info('Double-tap –æ–±–Ω–∞—Ä—É–∂–µ–Ω', data)
      
      // –ï—Å–ª–∏ double-tap –Ω–∞ room info –∏ –º—ã –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫, –æ—Ç–∫—Ä—ã–≤–∞–µ–º share modal
      const roomInfo = data.target?.closest('.room-info')
      if (roomInfo && this.state.roomId && this.state.isFirstPlayer) {
        this.handleShareRoomClick()
        return
      }

      // –ï—Å–ª–∏ double-tap –Ω–∞ —ç–∫—Ä–∞–Ω–µ –º–µ–Ω—é, —Å–æ–∑–¥–∞–µ–º –±—ã—Å—Ç—Ä—É—é –∏–≥—Ä—É
      const menuScreen = data.target?.closest('.menu-screen')
      if (menuScreen && this.ui.menuScreen?.style.display !== 'none') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ double-tap –Ω–µ –Ω–∞ form —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
        const isFormElement = data.target?.closest('select, input, textarea, button')
        if (!isFormElement) {
          this.showNotification('–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã...')
          this.handleCreateGame()
        }
      }
    })
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ long-press –∂–µ—Å—Ç–æ–≤
   */
  setupLongPressGestures() {
    // Long-press –Ω–∞ –∫–ª–µ—Ç–∫–µ - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    this.gestureManager.on('longPress', (data) => {
      logger.info('Long-press –æ–±–Ω–∞—Ä—É–∂–µ–Ω', data)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ long-press –Ω–∞ –∫–ª–µ—Ç–∫–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
      const gameCell = data.target?.closest('.game-cell')
      if (gameCell) {
        this.showCellInfo(gameCell)
        return
      }

      // Long-press –Ω–∞ –∫–æ–º–Ω–∞—Ç–µ - –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
      const roomInfo = data.target?.closest('.room-info')
      if (roomInfo && this.state.roomId) {
        this.showRoomContextMenu(data.x, data.y)
        return
      }

      // Long-press –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ - –æ—á–∏—Å—Ç–∏—Ç—å
      const input = data.target?.closest('input[type="text"]')
      if (input && input.value) {
        this.showInputContextMenu(input, data.x, data.y)
      }
    })
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ visual feedback –¥–ª—è touch-–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
   */
  addTouchFeedback() {
    // –î–æ–±–∞–≤–ª—è–µ–º feedback –¥–ª—è –∫–Ω–æ–ø–æ–∫ (–Ω–æ –Ω–µ –¥–ª—è form —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
    const buttons = document.querySelectorAll('button, .menu-btn, .game-cell')
    buttons.forEach(button => {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º form —ç–ª–µ–º–µ–Ω—Ç—ã
      if (!button.closest('select, input, textarea')) {
        const cleanup = GestureUtils.addTouchFeedback(button, 'touch-active')
        GestureUtils.preventGestureDefaults(button)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º accessibility
        if (!GestureUtils.isAccessibleTouchTarget(button)) {
          logger.warn('–≠–ª–µ–º–µ–Ω—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º accessibility:', button)
        }
      }
    })
  }

  /**
   * –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–µ—Ç–∫–µ
   */
  showCellInfo(cellElement) {
    const row = cellElement.dataset.row
    const col = cellElement.dataset.col
    const isRevealed = cellElement.classList.contains('game-cell--revealed')
    const letter = cellElement.textContent?.trim() || ''
    
    let message = `–ö–ª–µ—Ç–∫–∞ (${parseInt(row) + 1}, ${parseInt(col) + 1})`
    
    if (isRevealed) {
      message += letter ? ` - –±—É–∫–≤–∞: ${letter}` : ' - –ø—É—Å—Ç–∞—è'
    } else {
      message += ' - —Å–∫—Ä—ã—Ç–∞'
    }
    
    this.showNotification(message)
  }

  /**
   * –ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã
   */
  showRoomContextMenu(x, y) {
    const actions = [
      {
        text: '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å ID',
        action: () => this.copyRoomId()
      }
    ]

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    if (this.state.isFirstPlayer) {
      actions.push({
        text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É',
        action: () => this.handleShareRoomClick()
      })
    }

    actions.push({
      text: '–û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ',
      action: () => {
        this.debouncer.debounce('refreshGameState', () => {
          this.loadGameState()
        }, 100)
      }
    })
    
    this.contextMenuManager.show(x, y, actions)
  }

  /**
   * –ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è input
   */
  showInputContextMenu(inputElement, x, y) {
    const actions = [
      {
        text: '–û—á–∏—Å—Ç–∏—Ç—å',
        action: () => {
          inputElement.value = ''
          inputElement.focus()
          this.showNotification('–ü–æ–ª–µ –æ—á–∏—â–µ–Ω–æ')
        }
      },
      {
        text: '–í—Å—Ç–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞',
        action: async () => {
          try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É clipboard API
            if (!navigator.clipboard || !navigator.clipboard.readText) {
              throw new Error('Clipboard API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è')
            }
            
            const text = await navigator.clipboard.readText()
            if (text) {
              inputElement.value = text
              this.showNotification('–¢–µ–∫—Å—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω')
            } else {
              this.showNotification('–ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –ø—É—Å—Ç')
            }
          } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞:', error)
            this.showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—É—Ñ–µ—Ä–∞')
          }
        }
      }
    ]
    
    this.contextMenuManager.show(x, y, actions)
  }

  /**
   * –ü–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
   */
  showBackToMenuConfirmation() {
    const actions = [
      {
        text: '–î–∞, –≤—ã–π—Ç–∏ –≤ –º–µ–Ω—é',
        action: () => {
          this.handleNewGame()
        },
        destructive: true
      },
      {
        text: '–û—Ç–º–µ–Ω–∞',
        action: () => {
          // –ü—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
        }
      }
    ]

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤ —Ü–µ–Ω—Ç—Ä–µ —ç–∫—Ä–∞–Ω–∞
    const centerX = window.innerWidth / 2
    const centerY = window.innerHeight / 2
    
    this.contextMenuManager.show(centerX, centerY, actions)
  }

  checkUrlParams() {
    const urlParams = new URLSearchParams(window.location.search)
    const roomId = urlParams.get('room')

    if (roomId) {
      logger.info('–û–±–Ω–∞—Ä—É–∂–µ–Ω roomId –≤ URL', { roomId })
      if (this.ui.roomIdInput) {
        this.ui.roomIdInput.value = roomId
      }
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∏–≥—Ä–µ
      this.debouncer.debounce('autoJoinFromUrl', () => {
        this.handleJoinGame()
      }, 500)
    }
  }

  async handleCreateGame() {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –¥–≤–æ–π–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã
    if (this.state.isCreatingGame) {
      logger.warn('–ò–≥—Ä–∞ —É–∂–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤')
      return
    }

    this.state.isCreatingGame = true
    this.state.isFirstPlayer = true // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    this.state.playerJoinedNotificationShown = false // –ù–û–í–û–ï: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
    setTimeout(() => {
      this.state.isCreatingGame = false
    }, 2000)

    logger.info('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã')

    try {
      this.showLoading('–°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã...')

      const wordLength = parseInt(this.ui.wordLengthSelect?.value || '5')
      logger.info('–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –¥–ª–∏–Ω–∞ —Å–ª–æ–≤–∞:', wordLength)
      
      const result = await createGame(wordLength)
      this.state.roomId = result.roomId

      logger.info('–ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞', { roomId: this.state.roomId })

      this.subscribeToRoom(this.state.roomId)
      await this.loadGameState()
      this.showGameScreen()
      this.hideLoading()
      this.displayRoomId(this.state.roomId)
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
      this.showWaitingForPlayer()

    } catch (error) {
      this.state.isCreatingGame = false
      this.state.isFirstPlayer = false
      this.handleError(error, '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É')
    }
  }

  async handleJoinGame() {
    const roomId = this.ui.roomIdInput?.value.trim()

    if (!roomId) {
      this.showError('–í–≤–µ–¥–∏—Ç–µ ID –∫–æ–º–Ω–∞—Ç—ã')
      return
    }

    logger.info('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ', { roomId })

    try {
      this.showLoading('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ...')

      const result = await joinGame(roomId)
      this.state.roomId = roomId
      this.state.isFirstPlayer = false // –í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫
      this.state.playerJoinedNotificationShown = false // –ù–û–í–û–ï: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

      logger.info('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ', { roomId, firstPlayer: result.firstPlayer })

      this.subscribeToRoom(this.state.roomId)
      await this.loadGameState()
      this.showGameScreen()
      this.hideLoading()

    } catch (error) {
      this.handleError(error, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ')
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–∂–∏–¥–∞–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
   */
  showWaitingForPlayer() {
    if (this.ui.waitingIndicator && this.state.isFirstPlayer) {
      this.ui.waitingIndicator.style.display = 'flex'
      logger.info('Showing waiting indicator for first player')
    }
  }

  /**
   * –°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–∂–∏–¥–∞–Ω–∏—è
   */
  hideWaitingForPlayer() {
    if (this.ui.waitingIndicator) {
      this.ui.waitingIndicator.style.display = 'none'
      logger.info('Hiding waiting indicator')
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–≥—Ä—É"
   */
  handleShareRoomClick() {
    if (!this.state.roomId) {
      this.showError('–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É')
      return
    }

    if (!this.state.isFirstPlayer) {
      this.showNotification('–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–≥—Ä—ã –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è')
      return
    }

    const shareUrl = this.generateShareUrl(this.state.roomId)
    
    // –ü—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - fallback
    try {
      this.shareModalManager.show(shareUrl, this.state.roomId)
      logger.info('Share modal opened successfully')
    } catch (error) {
      logger.error('Failed to open share modal, using fallback:', error)
      this.fallbackShareRoom(shareUrl)
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞
   */
  generateShareUrl(roomId) {
    const baseUrl = `${window.location.origin}${window.location.pathname}`
    return `${baseUrl}?room=${encodeURIComponent(roomId)}`
  }

  /**
   * Fallback –º–µ—Ç–æ–¥ –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞ (–µ—Å–ª–∏ –º–æ–¥–∞–ª –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
   */
  fallbackShareRoom(shareUrl) {
    if (navigator.clipboard && navigator.clipboard.writeText) {
      navigator.clipboard.writeText(shareUrl).then(() => {
        this.showNotification('–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!')
      }).catch((error) => {
        logger.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏:', error)
        this.showNotification(`–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π: ${shareUrl}`)
      })
    } else {
      this.showNotification(`–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π: ${shareUrl}`)
    }
  }

  subscribeToRoom(roomId) {
    logger.info('–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Realtime –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', { roomId })

    realtimeManager.subscribeToRoom(roomId, {
      onGameUpdate: (newRecord) => {
        this.handleGameUpdate(newRecord)
      },
      onPlayerJoined: (newRecord) => {
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è onPlayerJoined', { 
          newRecord,
          playerJoinedNotificationShown: this.state.playerJoinedNotificationShown,
          isFirstPlayer: this.state.isFirstPlayer,
          previousGameState: this.state.previousGameState
        })
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
        // 1. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—â–µ –Ω–µ –±—ã–ª–æ –ø–æ–∫–∞–∑–∞–Ω–æ
        // 2. –ú—ã –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ (–∫–æ—Ç–æ—Ä—ã–π –∂–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ)
        // 3. –í –∏–≥—Ä–µ —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫
        if (!this.state.playerJoinedNotificationShown && 
            this.state.isFirstPlayer && 
            newRecord.player2_id) {
          
          this.hideWaitingForPlayer() // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–∂–∏–¥–∞–Ω–∏—è
          this.showNotification('–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è! –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!')
          this.state.playerJoinedNotificationShown = true // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ
          logger.info('–ü–æ–∫–∞–∑–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞')
        }
        
        this.handleGameUpdate(newRecord)
      },
      onCellRevealed: (newRecord) => {
        this.handleGameUpdate(newRecord)
      },
      onGameFinished: (newRecord) => {
        this.handleGameFinished(newRecord)
      },
      onError: (error) => {
        this.handleError(error, '–û—à–∏–±–∫–∞ Realtime –ø–æ–¥–ø–∏—Å–∫–∏')
      }
    })
  }

  handleGameUpdate(gameState) {
    logger.info('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã', { gameState })
    
    // –ù–û–í–û–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    this.state.previousGameState = this.state.gameState
    this.state.gameState = gameState

    // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö
    const boardData = gameState.board_state ||
      (gameState.field_state?.grid) ||
      gameState.field_state

    if (!boardData) {
      logger.error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–æ—Å–∫–∏', { gameState })
      return
    }

    // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–∂–∏–¥–∞–Ω–∏—è –µ—Å–ª–∏ –∏–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞
    if (gameState.status === 'active') {
      this.hideWaitingForPlayer()
    }

    this.components.gameGrid.updateBoard(boardData)
    this.components.turnIndicator.setCurrentUser(this.state.currentUser.id)
    this.components.turnIndicator.updateGameState(gameState)

    const isMyTurn = this.components.turnIndicator.isCurrentUserTurn()
    const isActive = gameState.status === 'active'

    this.components.gameGrid.setInteractive(isMyTurn && isActive)
    this.components.guessInput.setEnabled(isMyTurn && isActive)

    if (isMyTurn && isActive) {
      this.components.guessInput.focus()
    }
  }

  async loadGameState() {
    try {
      const gameState = await getGameState(this.state.roomId)
      this.handleGameUpdate(gameState)
    } catch (error) {
      this.handleError(error, '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã')
    }
  }

  async handleCellClick(row, col) {
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–ª–µ—Ç–∫–µ', { row, col })

    try {
      this.showLoading('–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–ª–µ—Ç–∫–∏...')
      await revealCell(this.state.roomId, row, col)
      this.components.gameGrid.highlightCell(row, col)
      this.hideLoading()
    } catch (error) {
      this.handleError(error, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–ª–µ—Ç–∫—É')
    }
  }

  async handleGuessSubmit(word) {
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ —É–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ', { word })

    try {
      this.showLoading('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–≤–∞...')
      const result = await validateGuess(this.state.roomId, word)

      if (result.correct) {
        this.showNotification(`–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –°–ª–æ–≤–æ –±—ã–ª–æ: ${result.word}`)
      } else {
        this.showNotification('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–æ–ø–µ—Ä–Ω–∏–∫—É')
      }

      this.hideLoading()
    } catch (error) {
      this.handleError(error, '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–æ–≤–∞')
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —Ö–æ–¥–∞
   */
  async handleSkipTurn() {
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —Ö–æ–¥–∞')

    try {
      this.showLoading('–ü—Ä–æ–ø—É—Å–∫ —Ö–æ–¥–∞...')
      const result = await skipTurn(this.state.roomId)

      if (result.skipped) {
        this.showNotification('–•–æ–¥ –ø—Ä–æ–ø—É—â–µ–Ω! –•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–æ–ø–µ—Ä–Ω–∏–∫—É')
      } else {
        // –ù–µ –¥–æ–ª–∂–Ω–æ —Å–ª—É—á–∏—Ç—å—Å—è, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        this.showNotification('–•–æ–¥ –ø–µ—Ä–µ–¥–∞–Ω —Å–æ–ø–µ—Ä–Ω–∏–∫—É')
      }

      this.hideLoading()
    } catch (error) {
      this.handleError(error, '–û—à–∏–±–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —Ö–æ–¥–∞')
    }
  }

  handleGameFinished(gameState) {
    logger.info('–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', { gameState })

    const userPlayerNumber = this.components.turnIndicator.getCurrentUserPlayerNumber()

    this.components.gameOverScreen.show({
      winner: gameState.winner,
      word: gameState.word,
      player1Score: gameState.player1_score,
      player2Score: gameState.player2_score,
      currentUserId: this.state.currentUser.id,
      player1Id: gameState.player1_id,
      player2Id: gameState.player2_id
    })
  }

  handleNewGame() {
    window.location.reload()
  }

  handleShareRoom() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
    this.handleShareRoomClick()
  }

  copyRoomId() {
    if (this.state.roomId) {
      if (navigator.clipboard && navigator.clipboard.writeText) {
        navigator.clipboard.writeText(this.state.roomId).then(() => {
          this.showNotification('ID –∫–æ–º–Ω–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!')
        }).catch((error) => {
          logger.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ID –∫–æ–º–Ω–∞—Ç—ã:', error)
          this.showNotification(`ID –∫–æ–º–Ω–∞—Ç—ã: ${this.state.roomId}`)
        })
      } else {
        this.showNotification(`ID –∫–æ–º–Ω–∞—Ç—ã: ${this.state.roomId}`)
      }
    }
  }

  displayRoomId(roomId) {
    if (this.ui.roomIdDisplay) {
      this.ui.roomIdDisplay.textContent = roomId
    }
  }

  showGameScreen() {
    if (this.ui.menuScreen) {
      this.ui.menuScreen.style.display = 'none'
    }
    if (this.ui.gameScreen) {
      this.ui.gameScreen.style.display = 'block'
    }
  }

  showLoading(message = '–ó–∞–≥—Ä—É–∑–∫–∞...') {
    if (this.ui.loadingOverlay) {
      this.ui.loadingOverlay.style.display = 'flex'
      const loadingText = this.ui.loadingOverlay.querySelector('.loading-text')
      if (loadingText) {
        loadingText.textContent = message
      }
    }
  }

  hideLoading() {
    if (this.ui.loadingOverlay) {
      this.ui.loadingOverlay.style.display = 'none'
    }
  }

  showError(message) {
    if (this.ui.errorMessage) {
      this.ui.errorMessage.textContent = message
      this.ui.errorMessage.style.display = 'block'

      setTimeout(() => {
        if (this.ui.errorMessage) {
          this.ui.errorMessage.style.display = 'none'
        }
      }, 5000)
    }
  }

  showNotification(message) {
    const notification = document.createElement('div')
    notification.className = 'notification notification--show'
    notification.textContent = message
    document.body.appendChild(notification)

    setTimeout(() => {
      notification.classList.add('notification--show')
    }, 100)

    setTimeout(() => {
      notification.classList.remove('notification--show')
      setTimeout(() => notification.remove(), 300)
    }, 3000)
  }

  handleError(error, context = '') {
    this.hideLoading()
    
    // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
    const gameError = handleError(error)
    const message = context ? `${context}: ${gameError.message}` : gameError.message
    
    logger.error(`–û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏: ${context}`, {
      error: gameError,
      originalError: error,
      stack: error?.stack,
      context,
      userState: {
        roomId: this.state.roomId,
        isLoading: this.state.isLoading,
        isFirstPlayer: this.state.isFirstPlayer,
        playerJoinedNotificationShown: this.state.playerJoinedNotificationShown
      }
    })
    
    this.showError(message)
  }

  cleanup() {
    logger.info('–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')
    
    // –û—á–∏—â–∞–µ–º Realtime –ø–æ–¥–ø–∏—Å–∫–∏
    realtimeManager.unsubscribeAll()
    
    // –û—á–∏—â–∞–µ–º –∂–µ—Å—Ç—ã
    if (this.gestureManager && this.gestureManager.isActive()) {
      this.gestureManager.destroy()
    }
    
    // –û—á–∏—â–∞–µ–º debouncer
    if (this.debouncer) {
      this.debouncer.clear()
    }
    
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
    if (this.contextMenuManager) {
      this.contextMenuManager.hide()
    }
    
    // –û—á–∏—â–∞–µ–º share modal
    if (this.shareModalManager) {
      this.shareModalManager.destroy()
    }
  }
}